#!/usr/bin/env python3

import argparse
import datetime
import os
import subprocess
import sys
import tempfile
import time

import yaml


def parse_config(filename):
    with open(filename) as f:
        return yaml.safe_load(f)


def config_is_true(value):
    if isinstance(value, bool):
        return value
    elif isinstance(value, str) and value.lower() in ("yes", "true"):
        return True
    elif value == 1:
        return True
    else:
        return False


def config_get_retries(config):
    if "retries" in config["remote"]:
        retries = int(config["remote"]["retries"])
    else:
        retries = 0

    if "retry_wait" in config["remote"]:
        retry_wait = int(config["remote"]["retry_wait"])
    else:
        retry_wait = 0

    return retries, retry_wait


def write_exclude_file(excludes):
    tmpfile = tempfile.NamedTemporaryFile("w", suffix="-borgwrap")
    tmpfile.write("\n".join(excludes) + "\n")
    tmpfile.flush()
    return tmpfile


def run(
    action,
    config,
    archive=False,
    args=[],
    trailing_args=[],
    capture_stdout=False,
    capture_stderr=False,
):
    repo = config["remote"]["repository"]
    if archive:
        repo += "::{}-{{utcnow:%Y-%m-%dT%H:%M:%SZ}}".format(config["remote"]["prefix"])

    env = dict(os.environ)
    if "rsh" in config["remote"]:
        env["BORG_RSH"] = config["remote"]["rsh"]

    if capture_stdout:
        stdout = subprocess.PIPE
    else:
        stdout = None

    if capture_stderr:
        stderr = subprocess.PIPE
    else:
        stderr = None

    return subprocess.run(
        ["borg", action] + args + [repo] + trailing_args,
        check=True,
        env=env,
        stdout=stdout,
        stderr=stderr,
        universal_newlines=True,
    )


def action_create(config, dry_run, stats, list_files):
    source = config["location"]["source"]
    if isinstance(source, str):
        source = [source]

    cmd = []

    if "compression" in config["remote"]:
        cmd += ["--compression", config["remote"]["compression"]]

    if "rate_limit" in config["remote"]:
        cmd += ["--remote-ratelimit", str(config["remote"]["rate_limit"])]

    if "one_file_system" in config["location"] and config_is_true(config["location"]["one_file_system"]):
        cmd.append("--one-file-system")

    if "exclude_caches" in config["location"] and config_is_true(config["location"]["exclude_caches"]):
        cmd.append("--exclude-caches")

    if "keep_exclude_tags" in config["location"] and config_is_true(config["location"]["keep_exclude_tags"]):
        cmd.append("--keep-exclude-tags")

    if "exclude_if_present" in config["location"]:
        for exclude in config["location"]["exclude_if_present"]:
            cmd += ["--exclude-if-present", exclude]

    if "noatime" in config["location"] and config_is_true(config["location"]["noatime"]):
        cmd.append("--noatime")

    if "exclude" in config["location"] and len(config["location"]["exclude"]) > 0:
        exclude_file = write_exclude_file(config["location"]["exclude"])
        cmd += ["--exclude-from", exclude_file.name]

    if dry_run:
        cmd += ["--dry-run"]

    if stats:
        cmd += ["--stats"]

    if list_files:
        cmd += ["--list"]

    retries, retry_wait = config_get_retries(config)

    for i in range(retries + 1):
        try:
            run("create", config, archive=True, args=cmd, trailing_args=source)
            break
        except subprocess.CalledProcessError as e:
            print(
                "Backup creation failed with exit code {}".format(e.returncode),
                file=sys.stderr,
                flush=True,
            )

            if i == retries:
                sys.exit(e.returncode)

            if retry_wait == 0:
                print("Retrying backup ...", file=sys.stderr, flush=True)
            else:
                print(
                    "Retrying backup after {} min ..".format(retry_wait),
                    file=sys.stderr,
                    flush=True,
                )
                time.sleep(retry_wait * 60)


def action_list(config):
    args = ["--prefix", config["remote"]["prefix"]]
    run("list", config, args=args)


def action_check_age(config, max_age, min_size):
    try:
        proc_result = run(
            "info",
            config,
            archive=False,
            args=["--last", "1", "--json"],
            capture_stdout=True,
            capture_stderr=True,
        )
    except subprocess.CalledProcessError as e:
        print("BORGBACKUP UNKNOWN - borgbackup command failed\n\n" + e.stderr)
        sys.exit(3)
    last_backup = yaml.safe_load(proc_result.stdout)

    backup_start = datetime.datetime.strptime(last_backup["archives"][0]["start"], "%Y-%m-%dT%H:%M:%S.%f")
    if (datetime.datetime.now() - backup_start).total_seconds() > max_age:
        print("BORGBACKUP WARNING - last backup too old: {:%Y-%m-%dT%H:%M:%S}".format(backup_start))
        sys.exit(1)

    size = int(last_backup["archives"][0]["stats"]["original_size"] / 1024 / 1024)
    if min_size and size < min_size:
        print("BORGBACKUP WARNING - last backup too small\n\n{}M < {}M".format(size, min_size))
        sys.exit(1)

    print("BORGBACKUP OK - last backup on: {:%Y-%m-%dT%H:%M:%S}, size: {}M".format(backup_start, size))
    sys.exit(0)


def action_cmd(config, dry_run, raw_args):
    env = dict(os.environ)
    if "rsh" in config["remote"]:
        env["BORG_RSH"] = config["remote"]["rsh"]
    env["BORG_REPO"] = config["remote"]["repository"]

    cmd = ["borg"] + raw_args

    if dry_run:
        print('Not running command "{}" as dry run is enabled.'.format(" ".join(cmd)))
    else:
        subprocess.run(cmd, check=True, env=env)


def hooks_before(config, dry_run):
    if "hooks" not in config or "before" not in config["hooks"]:
        return

    for hook in config["hooks"]["before"]:
        if dry_run:
            print('Not running hook "{}" as dry run is enabled.'.format(hook))
        else:
            subprocess.run(hook, shell=True, check=True)


def hooks_after(config, dry_run):
    if "hooks" not in config or "after" not in config["hooks"]:
        return

    for hook in config["hooks"]["after"]:
        if dry_run:
            print('Not running hook "{}" as dry run is enabled.'.format(hook))
        else:
            subprocess.run(hook, shell=True, check=True)


def action_prune(config, dry_run, stats):
    cmd = ["--list"]
    cmd += ["--prefix", config["remote"]["prefix"]]

    if dry_run:
        cmd += ["--dry-run"]

    if stats:
        cmd += ["--stats"]

    if "keep_last" in config["retention"]:
        cmd += ["--keep-last", str(config["retention"]["keep_last"])]

    if "keep_within" in config["retention"]:
        cmd += ["--keep-within", str(config["retention"]["keep_within"])]

    if "keep_hourly" in config["retention"]:
        cmd += ["--keep-hourly", str(config["retention"]["keep_hourly"])]

    if "keep_daily" in config["retention"]:
        cmd += ["--keep-daily", str(config["retention"]["keep_daily"])]

    if "keep_weekly" in config["retention"]:
        cmd += ["--keep-weekly", str(config["retention"]["keep_weekly"])]

    if "keep_monthly" in config["retention"]:
        cmd += ["--keep-monthly", str(config["retention"]["keep_monthly"])]

    if "keep_yearly" in config["retention"]:
        cmd += ["--keep-yearly", str(config["retention"]["keep_yearly"])]

    retries, retry_wait = config_get_retries(config)

    for i in range(retries + 1):
        try:
            proc = run("prune", config, args=cmd, capture_stderr=True)
            for line in proc.stderr.splitlines(keepends=True):
                if not line.startswith("Keeping archive:"):
                    print(line, end="", file=sys.stderr)
            break
        except subprocess.CalledProcessError as e:
            if e.stderr:
                print(e.stderr, file=sys.stderr, flush=True)
            print(
                "Backup prune failed with exit code {}".format(e.returncode),
                file=sys.stderr,
                flush=True,
            )

            if i == retries:
                sys.exit(e.returncode)

            if retry_wait == 0:
                print("Retrying prune ...", file=sys.stderr, flush=True)
            else:
                print(
                    "Retrying prune after {} min ..".format(retry_wait),
                    file=sys.stderr,
                    flush=True,
                )
                time.sleep(retry_wait * 60)


def main():
    parser = argparse.ArgumentParser(description="borgbackup wrapper")
    parser.add_argument("--config", "-c", required=True, help="Path to the config file")
    parser.add_argument(
        "--dry-run",
        "-n",
        action="store_true",
        help="Perform a trial run with no changes made",
    )
    subparsers = parser.add_subparsers(dest="action")

    parser_create = subparsers.add_parser("create", help="Create a backup archive")
    parser_create.add_argument("--prune", action="store_true", help="Run prune after creating a backup")
    parser_create.add_argument(
        "--no-prune",
        action="store_true",
        help="Don't run prune after creating a backup [deprecated, as this is the default]",
    )
    parser_create.add_argument("--stats", action="store_true", help="Print statistics of the created archive")
    parser_create.add_argument(
        "--list",
        action="store_true",
        help="Print a list of all files being processed by borg",
    )

    parser_list = subparsers.add_parser("list", help="List backup archives")

    parser_prune = subparsers.add_parser("prune", help="Prune archives according to the config settings")
    parser_prune.add_argument("--stats", action="store_true", help="Print statistics of the deleted archives")

    parser_check_age = subparsers.add_parser(
        "nagios-check-age",
        help="Check last backup age, usable as a Icinga/Nagios check",
    )
    parser_check_age.add_argument("--max-age", type=int, required=True, help="Max age in hours")
    parser_check_age.add_argument("--min-size", type=int, help="Min backup size in MiB")

    parser_cmd = subparsers.add_parser(
        "cmd",
        help='Run a borgbackup command. Exports the remote archive as BORG_REPO so it can be referenced as "::".',
    )
    parser_cmd.add_argument("raw", nargs="+")

    args = parser.parse_args()

    config = parse_config(args.config)

    if args.action == "create":
        hooks_before(config, dry_run=args.dry_run)
        action_create(config, dry_run=args.dry_run, stats=args.stats, list_files=args.list)
        hooks_after(config, dry_run=args.dry_run)
        if args.prune:
            action_prune(config, dry_run=args.dry_run, stats=args.stats)
    elif args.action == "list":
        action_list(config)
    elif args.action == "prune":
        action_prune(config, dry_run=args.dry_run, stats=args.stats)
    elif args.action == "nagios-check-age":
        if args.min_size:
            min_size = args.min_size
        else:
            min_size = None
        action_check_age(config, max_age=args.max_age * 3600, min_size=min_size)
    elif args.action == "cmd":
        action_cmd(config, dry_run=args.dry_run, raw_args=args.raw)


if __name__ == "__main__":
    main()
